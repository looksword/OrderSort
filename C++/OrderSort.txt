int OrderSort::SortOrder(char * buffer1,char * buffer2,char * buffer3,char * buffer4)
{
    QByteArray qbyte1;
    qbyte1 = QByteArray(buffer1);
    QByteArray qbyte2;
    qbyte2 = QByteArray(buffer2);
    QByteArray qbyte3;
    qbyte3 = QByteArray(buffer3);

    QJsonParseError jsonError;
    QList<SalesOrder> SalesOrders;
    QJsonDocument document1 = QJsonDocument::fromJson(qbyte1,&jsonError);
    if(!document1.isNull() && (jsonError.error == QJsonParseError::NoError))
    {
        if(document1.isArray())
        {
            QJsonArray array = document1.array();
            int nSize = array.size();
            for(int i = 0;i < nSize;i++)
            {
                if(array.at(i).isObject())
                {
                    QJsonObject object = array.at(i).toObject();
                    SalesOrder newSalesOrder;
                    if(object.contains("SalesIndex"))
                    {
                        QJsonValue value = object.value("SalesIndex");
                        if(value.isString())
                        {
                            QString salesindex = value.toString();
                            newSalesOrder.SalesIndex = salesindex;
                        }
                    }
                    if(object.contains("ProductIndex"))
                    {
                        QJsonValue value = object.value("ProductIndex");
                        if(value.isArray())
                        {
                            QList<QString> productindexs;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isString())
                                {
                                    QString productindex = value.toString();
                                    productindexs.append(productindex);
                                }
                            }
                            newSalesOrder.ProductIndex = productindexs;
                        }
                    }
                    if(object.contains("WorkOrder"))
                    {
                        QJsonValue value = object.value("WorkOrder");
                        if(value.isArray())
                        {
                            QList<QString> workorders;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isString())
                                {
                                    QString workorder = value.toString();
                                    workorders.append(workorder);
                                }
                            }
                            newSalesOrder.WorkOrder = workorders;
                        }
                    }
                    SalesOrders.append(newSalesOrder);
                }
            }
        }
    }
    QList<AllOrder> AllOrders;
    QJsonDocument document2 = QJsonDocument::fromJson(qbyte2,&jsonError);
    if(!document2.isNull() && (jsonError.error == QJsonParseError::NoError))
    {
        if(document2.isArray())
        {
            QJsonArray array = document2.array();
            int nSize = array.size();
            for(int i = 0;i < nSize;i++)
            {
                if(array.at(i).isObject())
                {
                    QJsonObject object = array.at(i).toObject();
                    AllOrder newallOrder;
                    if(object.contains("Index"))
                    {
                        QJsonValue value = object.value("Index");
                        if(value.isString())
                        {
                            QString Index = value.toString();
                            newallOrder.Index = Index;
                        }
                    }
                    if(object.contains("OrderType"))
                    {
                        QJsonValue value = object.value("OrderType");
                        if(value.isDouble())
                        {
                            int OrderType = value.toInt();
                            newallOrder.OrderType = OrderType;
                        }
                    }
                    if(object.contains("ProductIndex"))
                    {
                        QJsonValue value = object.value("ProductIndex");
                        if(value.isArray())
                        {
                            QList<QString> productindexs;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isString())
                                {
                                    QString productindex = value.toString();
                                    productindexs.append(productindex);
                                }
                            }
                            newallOrder.ProductIndex = productindexs;
                        }
                    }
                    if(object.contains("ProductNum"))
                    {
                        QJsonValue value = object.value("ProductNum");
                        if(value.isArray())
                        {
                            QList<int> ProductNum;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isDouble())
                                {
                                    int productnum = value.toInt();
                                    ProductNum.append(productnum);
                                }
                            }
                            newallOrder.ProductNum = ProductNum;
                        }
                    }
                    if(object.contains("BagProcessStep"))
                    {
                        QJsonValue value = object.value("BagProcessStep");
                        if(value.isArray())
                        {
                            QList<QString> BagProcessStep;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isString())
                                {
                                    QString bagprocessstep = value.toString();
                                    BagProcessStep.append(bagprocessstep);
                                }
                            }
                            newallOrder.BagProcessStep = BagProcessStep;
                        }
                    }
                    if(object.contains("BagTReplaceTime"))
                    {
                        QJsonValue value = object.value("BagTReplaceTime");
                        if(value.isArray())
                        {
                            QList<int> BagTReplaceTime;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isDouble())
                                {
                                    int bagtreplacetime = value.toInt();
                                    BagTReplaceTime.append(bagtreplacetime);
                                }
                            }
                            newallOrder.BagTReplaceTime = BagTReplaceTime;
                        }
                    }
                    if(object.contains("BagMReplaceTime"))
                    {
                        QJsonValue value = object.value("BagMReplaceTime");
                        if(value.isArray())
                        {
                            QList<int> BagMReplaceTime;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isDouble())
                                {
                                    int bagmreplacetime = value.toInt();
                                    BagMReplaceTime.append(bagmreplacetime);
                                }
                            }
                            newallOrder.BagMReplaceTime = BagMReplaceTime;
                        }
                    }
                    if(object.contains("PourProcessStep"))
                    {
                        QJsonValue value = object.value("PourProcessStep");
                        if(value.isArray())
                        {
                            QList<QString> PourProcessStep;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isString())
                                {
                                    QString pourprocessstep = value.toString();
                                    PourProcessStep.append(pourprocessstep);
                                }
                            }
                            newallOrder.PourProcessStep = PourProcessStep;
                        }
                    }
                    if(object.contains("PourTReplaceTime"))
                    {
                        QJsonValue value = object.value("PourTReplaceTime");
                        if(value.isArray())
                        {
                            QList<int> PourTReplaceTime;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isDouble())
                                {
                                    int pourtreplacetime = value.toInt();
                                    PourTReplaceTime.append(pourtreplacetime);
                                }
                            }
                            newallOrder.PourTReplaceTime = PourTReplaceTime;
                        }
                    }
                    if(object.contains("PourMReplaceTime"))
                    {
                        QJsonValue value = object.value("PourMReplaceTime");
                        if(value.isArray())
                        {
                            QList<int> PourMReplaceTime;
                            QJsonArray array1 = value.toArray();
                            int nSize1 = array1.size();
                            for(int j = 0;j < nSize1;j++)
                            {
                                QJsonValue value = array1.at(j);
                                if(value.isDouble())
                                {
                                    int pourmreplacetime = value.toInt();
                                    PourMReplaceTime.append(pourmreplacetime);
                                }
                            }
                            newallOrder.PourMReplaceTime = PourMReplaceTime;
                        }
                    }
                    if(object.contains("DependProductIndex"))
                    {
                        QJsonValue value = object.value("DependProductIndex");
                        if(value.isString())
                        {
                            QString DependProductIndex = value.toString();
                            newallOrder.DependProductIndex = DependProductIndex;
                        }
                    }
                    AllOrders.append(newallOrder);
                }
            }
        }
    }
    QList<Stock> Stocks;
    QJsonDocument document3 = QJsonDocument::fromJson(qbyte3,&jsonError);
    if(!document3.isNull() && (jsonError.error == QJsonParseError::NoError))
    {
        if(document3.isArray())
        {
            QJsonArray array = document3.array();
            int nSize = array.size();
            for(int i = 0;i < nSize;i++)
            {
                if(array.at(i).isObject())
                {
                    QJsonObject object = array.at(i).toObject();
                    Stock newStock;
                    if(object.contains("ProductIndex"))
                    {
                        QJsonValue value = object.value("ProductIndex");
                        if(value.isString())
                        {
                            QString ProductIndex = value.toString();
                            newStock.ProductIndex = ProductIndex;
                            printf("StockMap %s",ProductIndex.toLatin1().data());
                        }
                    }
                    if(object.contains("ProductNum"))
                    {
                        QJsonValue value = object.value("ProductNum");
                        if(value.isDouble())
                        {
                            int ProductNum = value.toInt();
                            newStock.ProductNum = ProductNum;
                            printf(":%d\n,",ProductNum);
                        }
                    }
                    Stocks.append(newStock);
                }
            }
        }
    }

    int bagtime = 20;
    int pourtime = 10;
    //int order2time = 10;
    QString testalpha = "A";
    QString order2alpha = "U";
    int allsetnum = 400;
    int bagoncenum = 175;
    QMap<QString,SalesOrder> SalesMap;//销售订单溯源
    QMap<QString,order_34> order34;
    QList<ProductOrder> order56;
    QList<ProductOrder> order7;
    QMap<QString,int> StockMap;//备货仓内
    QMap<QString,int> In_Product;//齐套仓内
    QList<CountOrder> CountList;//相同产品订单
    QList<OutputOrder> outputorder;//结果
    QMap<QString,CostBag> BagCost;
    QMap<QString,CostPour> PourCost;
    foreach(SalesOrder sorder, SalesOrders)
    {
        if(!SalesMap.contains(sorder.SalesIndex))
        {
            SalesMap.insert(sorder.SalesIndex,sorder);
        }
        bool HaveEqual = false;
        QSet<QString> newProductSet;
        foreach(QString index, sorder.ProductIndex)
        {
            newProductSet << index;
        }
        for(int i = 0;i < CountList.length();i++)
        {
            if(CountList[i].ProductSet == newProductSet)
            {
                CountList[i].OrderNum++;
                CountList[i].SalesIndex.append(sorder.SalesIndex);
                HaveEqual = true;
            }
        }
        if(!HaveEqual)
        {
            CountOrder product;
            product.ProductSet = newProductSet;
            QList<QString> newSalesIndex;
            newSalesIndex.append(sorder.SalesIndex);
            product.SalesIndex= newSalesIndex;
            product.OrderNum = 1;
            CountList.append(product);
        }
    }
    std::sort(CountList.begin(), CountList.end(),[](const CountOrder & infoA, const CountOrder & infoB){return infoA.ProductSet.count() > infoB.ProductSet.count();});
    //qSort(CountList.begin(), CountList.end(),[](const CountOrder &infoA,const CountOrder &infoB){return infoA.ProductSet.count() > infoB.ProductSet.count();});
    foreach(AllOrder aorder, AllOrders)
    {
        if(aorder.OrderType == 3 || aorder.OrderType == 4)
        {
            if(!order34.contains(aorder.ProductIndex[0]))
            {
                order_34 neworder34;
                neworder34.OrderType = aorder.OrderType;
                neworder34.ProductNum = aorder.ProductNum[0];
                order34.insert(aorder.ProductIndex[0],neworder34);
            }
            if(!PourCost.contains(aorder.ProductIndex[0]))
            {
                CostPour newcostpour;
                newcostpour.PourProcessStep = aorder.PourProcessStep;
                newcostpour.PourTReplaceTime = aorder.PourTReplaceTime;
                newcostpour.PourMReplaceTime = aorder.PourMReplaceTime;
                PourCost.insert(aorder.ProductIndex[0],newcostpour);
            }
        }
        if(aorder.OrderType == 5 || aorder.OrderType == 6)
        {
            ProductOrder newproduct;
            QMap<QString,int> productnum;
            for(int i = 0;i < aorder.ProductIndex.length();i++)
            {
                if(!productnum.contains(aorder.ProductIndex[i]))
                {
                    productnum.insert(aorder.ProductIndex[i], aorder.ProductNum[i]);
                }
                if(!In_Product.contains(aorder.ProductIndex[i]))
                {
                    In_Product.insert(aorder.ProductIndex[i], 0);
                }
                if(!BagCost.contains(aorder.ProductIndex[i]))
                {
                    CostBag newcostbag;
                    newcostbag.BagProcessStep = aorder.BagProcessStep;
                    newcostbag.BagTReplaceTime = aorder.BagTReplaceTime;
                    newcostbag.BagMReplaceTime = aorder.BagMReplaceTime;
                    BagCost.insert(aorder.ProductIndex[i],newcostbag);
                }
            }
            newproduct.OrderType = aorder.OrderType;
            newproduct.ProductNum = productnum;
            newproduct.DependProductIndex = aorder.DependProductIndex;
            order56.append(newproduct);
        }
        if(aorder.OrderType == 7)
        {
            ProductOrder newproduct;
            QMap<QString,int> productnum;
            for(int i = 0;i < aorder.ProductIndex.length();i++)
            {
                if(!productnum.contains(aorder.ProductIndex[i]))
                {
                    productnum.insert(aorder.ProductIndex[i], aorder.ProductNum[i]);
                }
                if(!In_Product.contains(aorder.ProductIndex[i]))
                {
                    In_Product.insert(aorder.ProductIndex[i], 0);
                }
                if(!BagCost.contains(aorder.ProductIndex[i]))
                {
                    CostBag newcostbag;
                    newcostbag.BagProcessStep = aorder.BagProcessStep;
                    newcostbag.BagTReplaceTime = aorder.BagTReplaceTime;
                    newcostbag.BagMReplaceTime = aorder.BagMReplaceTime;
                    BagCost.insert(aorder.ProductIndex[i],newcostbag);
                }
                if(!PourCost.contains(aorder.ProductIndex[i]))
                {
                    CostPour newcostpour;
                    newcostpour.PourProcessStep = aorder.PourProcessStep;
                    newcostpour.PourTReplaceTime = aorder.PourTReplaceTime;
                    newcostpour.PourMReplaceTime = aorder.PourMReplaceTime;
                    PourCost.insert(aorder.ProductIndex[i],newcostpour);
                }
            }
            newproduct.OrderType = aorder.OrderType;
            newproduct.ProductNum = productnum;
            newproduct.DependProductIndex = aorder.DependProductIndex;
            order7.append(newproduct);
        }
    }
    foreach(Stock st, Stocks)
    {
        if(!StockMap.contains(st.ProductIndex))
        {
            StockMap.insert(st.ProductIndex,st.ProductNum);
        }
    }

    bool First56 = true;
    //bool NotExplode = true;
    QString LastBagOrder = "";
    QString LastPourOrder = "";
    int Index = 1;
    int orderBagStart = 0;
    int orderPourStart = 0;
    QMap<QString, QList<QString>> SalesIndexs;
    while(true)
    {
        //计算制令单56剩余
        int sum56 = 0;
        for(int i = 0;i < order56.length();i++)
        {
            foreach(QString product, order56[i].ProductNum.keys())
            {
                sum56 += order56[i].ProductNum[product];
            }
        }
        //计算制令单7剩余
        int sum7 = 0;
        for(int i = 0;i < order7.length();i++)
        {
            foreach(QString product, order7[i].ProductNum.keys())
            {
                sum7 += order7[i].ProductNum[product];
            }
        }
        if((sum56 == 0) && (sum7 == 0))
        {
            break;
        }
        if (((sum56 != 0) && First56) || sum7 == 0)
        {
            //遍历计算各制令单入库数量、可出库数量、灌装数量、换型换料时长
            //int max_count = 0;
            int max_num = 0;
            int max_i = 0;
            int max_cost56 = 0;
            int max_cost34 = 0;
            double max_cost_rate = 0;
            int max_ordernum = 0;
            int max_pournum = 0;
            int max_waittime = 0;
            for(int i = 0;i < order56.length();i++)
            {
                QString p = order56[i].ProductNum.firstKey();
                if(order56[i].ProductNum[p] == 0)
                {
                    continue;
                }
                int total = 0;
                int cmap[6];
                cmap[1] = 0;
                cmap[2] = 0;
                cmap[3] = 0;
                cmap[4] = 0;
                cmap[5] = 0;
                QMap<QString,int> New_product;//在库产品
                foreach(QString product,In_Product.keys())
                {
                    if(In_Product[product] > 0)
                    {
                        New_product.insert(product,In_Product[product]);
                    }
                }
                for(int j = 0;j < CountList.length();j++)
                {
                    if(CountList[j].OrderNum == 0)
                    {
                        continue;
                    }
                    QSet<QString> newset = CountList[j].ProductSet;
                    if(!newset.contains(p))
                    {
                        continue;
                    }
                    bool allinproduct = true;//是否都在库
                    foreach(QString product,newset)
                    {
                        if(product == p)
                        {
                            continue;
                        }
                        if(!New_product.contains(product))
                        {
                            allinproduct = false;
                        }
                    }
                    if(!allinproduct)
                    {
                        continue;
                    }

                    if(newset.count() == 1)
                    {
                        cmap[1]++;
                    }
                    else
                    {
                        int min_num = CountList[j].OrderNum;
                        foreach(QString product,newset)
                        {
                            if(product == p)
                            {
                                continue;
                            }
                            min_num = New_product[product] > min_num ? min_num : New_product[product];
                        }
                        foreach(QString product,newset)
                        {
                            if(product == p)
                            {
                                continue;
                            }
                            New_product[product] -= min_num;
                        }
                        int prolen = newset.count();
                        if(prolen > 1)
                        {
                            cmap[prolen] += min_num;
                        }
                    }
                }
                total = cmap[5] * 5 + cmap[4] * 4 + cmap[3] * 3 + cmap[2] * 2 + cmap[1];
                if(total > 0)
                {
                    int test_min_order_num = cmap[1] + cmap[2] + cmap[3] + cmap[4] + cmap[5];
                    test_min_order_num = test_min_order_num > bagoncenum ? test_min_order_num : bagoncenum;
                    int test_max_order_num = test_min_order_num < order56[i].ProductNum[p] ? test_min_order_num : order56[i].ProductNum[p];
                    int newpournum = 0;
                    int maxpournum = 0;
                    int costtime56 = 0;
                    int costtime34 = 0;
                    int bagwaittime = 0;
                    QString frontp = order56[i].DependProductIndex;
                    if(LastBagOrder == "" || !BagCost.contains(LastBagOrder))
                    {
                        for(int j = 0; j < BagCost[p].BagProcessStep.length();j++)
                        {
                            costtime56 += BagCost[p].BagMReplaceTime[j];
                            costtime56 += BagCost[p].BagTReplaceTime[j];
                        }
                    }
                    else
                    {
                        QSet<QString> lastproductset;
                        for(int j = 0; j < BagCost[LastBagOrder].BagProcessStep.length();j++)
                        {
                            lastproductset << BagCost[LastBagOrder].BagProcessStep[j];
                        }
                        for(int j = 0; j < BagCost[p].BagProcessStep.length();j++)
                        {
                            if(!lastproductset.contains(BagCost[p].BagProcessStep[j]))
                            {
                                costtime56 += BagCost[p].BagMReplaceTime[j];
                                costtime56 += BagCost[p].BagTReplaceTime[j];
                            }
                        }
                    }
                    if(LastPourOrder == "" || !PourCost.contains(LastPourOrder))
                    {
                        for(int j = 0; j < PourCost[frontp].PourProcessStep.length();j++)
                        {
                            costtime34 += PourCost[frontp].PourMReplaceTime[j];
                            costtime34 += PourCost[frontp].PourTReplaceTime[j];
                        }
                    }
                    else
                    {
                        QSet<QString> lastproductset;
                        for(int j = 0; j < PourCost[LastPourOrder].PourProcessStep.length();j++)
                        {
                            lastproductset << PourCost[LastPourOrder].PourProcessStep[j];
                        }
                        for(int j = 0; j < PourCost[frontp].PourProcessStep.length();j++)
                        {
                            if(!lastproductset.contains(PourCost[frontp].PourProcessStep[j]))
                            {
                                costtime34 += PourCost[frontp].PourMReplaceTime[j];
                                costtime34 += PourCost[frontp].PourTReplaceTime[j];
                            }
                        }
                    }
                    if(test_max_order_num > StockMap[p])
                    {
                        if(orderBagStart > orderPourStart + costtime34 * 60)
                        {
                            newpournum = int((orderBagStart - orderPourStart - costtime34 * 60) / pourtime);
                            maxpournum = newpournum;
                            newpournum = newpournum < order56[i].ProductNum[p] - StockMap[p] ? newpournum : order56[i].ProductNum[p] - StockMap[p];
                            maxpournum = maxpournum < order34[frontp].ProductNum ? maxpournum : order34[frontp].ProductNum;
                        }
                        else if(sum7 == 0)
                        {
                            bagwaittime = costtime34;
                            newpournum = test_max_order_num - StockMap[p];
                            max_pournum = newpournum > order34[frontp].ProductNum ? newpournum : order34[frontp].ProductNum;
                        }
                    }
                    else
                    {
                        if(orderBagStart > orderPourStart + costtime34 * 60)
                        {
                            maxpournum = int((orderBagStart - orderPourStart - costtime34 * 60) / pourtime);
                            maxpournum = maxpournum < order34[frontp].ProductNum ? maxpournum : order34[frontp].ProductNum;
                        }
                    }
                    test_max_order_num = test_max_order_num < StockMap[p] + newpournum ? test_min_order_num : StockMap[p] + newpournum;
                    int permitnum = 0;
                    foreach(QString product,In_Product.keys())
                    {
                        permitnum += In_Product[product];
                    }
                    permitnum = 400 - permitnum + total;
                    int test_next_order_num = test_max_order_num < permitnum ? test_max_order_num : permitnum;
                    double cost_rate = (double)(test_next_order_num * bagtime) / (bagwaittime * 60 + costtime56 * 60 + test_next_order_num * bagtime);
                    if(cost_rate > max_cost_rate)
                    {
                        max_num = total;
                        max_i = i;
                        //max_count = cmap[1] + cmap[2] + cmap[3] + cmap[4] + cmap[5];
                        max_pournum = maxpournum;
                        max_ordernum = test_next_order_num;
                        max_cost56 = costtime56;
                        max_cost34 = costtime34;
                        max_cost_rate = cost_rate;
                        max_waittime = bagwaittime * 60;
                    }
                }
            }
            if(max_num == 0)
            {
                //可出库数量为0
                //计算剩余库存中可直接入库数量,进仓
                int nostock56 = 0;
                for(int i = 0;i < order56.length();i++)
                {
                    QString p = order56[i].ProductNum.firstKey();
                    if((order56[i].ProductNum[p] <= StockMap[p]) && (StockMap[p] > 0))
                    {
                        nostock56 += order56[i].ProductNum[p];
                    }
                }
                int permitnum = 0;
                foreach(QString product,In_Product.keys())
                {
                    permitnum += In_Product[product];
                }
                if((nostock56 < 400 - permitnum) && (nostock56 > 0))
                {
                    for(int i = 0;i < order56.length();i++)
                    {
                        QString p = order56[i].ProductNum.firstKey();
                        if(order56[i].ProductNum[p] == 0)
                        {
                            continue;
                        }
                        if(order56[i].ProductNum[p] <= StockMap[p])
                        {
                            //进仓
                            int testcosttime56 = 0;
                            int next_order_num = order56[i].ProductNum[p];
                            if(LastBagOrder == "" || !BagCost.contains(LastBagOrder))
                            {
                                for(int j = 0; j < BagCost[p].BagProcessStep.length();j++)
                                {
                                    testcosttime56 += BagCost[p].BagMReplaceTime[j];
                                    testcosttime56 += BagCost[p].BagTReplaceTime[j];
                                }
                            }
                            else
                            {
                                QSet<QString> lastproductset;
                                for(int j = 0; j < BagCost[LastBagOrder].BagProcessStep.length();j++)
                                {
                                    lastproductset << BagCost[LastBagOrder].BagProcessStep[j];
                                }
                                for(int j = 0; j < BagCost[p].BagProcessStep.length();j++)
                                {
                                    if(!lastproductset.contains(BagCost[p].BagProcessStep[j]))
                                    {
                                        testcosttime56 += BagCost[p].BagMReplaceTime[j];
                                        testcosttime56 += BagCost[p].BagTReplaceTime[j];
                                    }
                                }
                            }
                            In_Product[p] += next_order_num;
                            //更新 在库 齐套出库
                            for(int j = 0;j < CountList.length();j++)
                            {
                                if(CountList[j].OrderNum == 0)
                                {
                                    continue;
                                }
                                int s = 400;
                                foreach(QString product, CountList[j].ProductSet)
                                {
                                    if(In_Product[product] < s)
                                    {
                                        s = In_Product[product];
                                    }
                                }
                                if(s > 0)
                                {
                                    int delta = 0;
                                    if(CountList[j].OrderNum > s)
                                    {
                                        delta = s;
                                        CountList[j].OrderNum -= s;
                                        foreach(QString product, CountList[j].ProductSet)
                                        {
                                            In_Product[product] -= delta;
                                        }
                                    }
                                    else
                                    {
                                        delta = CountList[j].OrderNum;
                                        CountList[j].OrderNum = 0;
                                        foreach(QString product, CountList[j].ProductSet)
                                        {
                                            In_Product[product] -= delta;
                                        }
                                    }
                                    for(int k = 0;k < delta;k++)
                                    {
                                        QString salesindex = CountList[j].SalesIndex.front();
                                        int xlen = SalesMap[salesindex].ProductIndex.count();
                                        for(int x = 0;x < xlen;x++)
                                        {
                                            QString newproduct = SalesMap[salesindex].ProductIndex[x];
                                            QString newwork = SalesMap[salesindex].WorkOrder[x];
                                            if(SalesIndexs.contains(newproduct))
                                            {
                                                SalesIndexs[newproduct].append(newwork);
                                            }
                                            else
                                            {
                                                QList<QString> newworkorder;
                                                newworkorder.append(newwork);
                                                SalesIndexs.insert(newproduct,newworkorder);
                                            }
                                        }
                                        CountList[j].SalesIndex.pop_front();
                                    }
                                }
                            }
                            Index++;
                            //记录 order56
                            printf("Order5 %s:%d ,",p.toLatin1().data(),next_order_num);
                            //
                            int sec1 = orderBagStart + testcosttime56 * 60;
                            int sec2 = testcosttime56 * 60;
                            int sec3 = orderBagStart + testcosttime56 * 60 + next_order_num * bagtime;
                            int mins = sec1 / 60;
                            int sec = sec1 % 60;
                            int hour = mins / 60;
                            int min = mins % 60;
                            QString tstr1 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                            mins = sec2 / 60;
                            sec = sec2 % 60;
                            hour = mins / 60;
                            min = mins % 60;
                            QString tstr2 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                            mins = sec3 / 60;
                            sec = sec3 % 60;
                            hour = mins / 60;
                            min = mins % 60;
                            QString tstr3 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                            //
                            OutputOrder neworder;
                            neworder.Index = Index;
                            neworder.OrderType = order56[i].OrderType;
                            QList<QString> productindex;
                            productindex.append(p);
                            neworder.ProductIndex = productindex;
                            QList<int> productnum;
                            productnum.append(next_order_num);
                            neworder.ProductNum = productnum;
                            QList<QString> workorder;
                            neworder.WorkOrder = workorder;
                            neworder.BagStartTime = tstr1;
                            neworder.PourStartTime = "";
                            neworder.BagRestTime = tstr2;
                            neworder.PourRestTime = "";
                            neworder.EndTime = tstr3;
                            outputorder.append(neworder);
                            //
                            orderBagStart += testcosttime56 * 60 + next_order_num * bagtime;
                            order56[i].ProductNum[p] -= next_order_num;
                            StockMap[p] -= next_order_num;
                            LastBagOrder = p;
                        }
                    }
                }
                else
                {
                    First56 = false;
                }
            }
            else
            {//否则,进仓
                QString p = order56[max_i].ProductNum.firstKey();
                In_Product[p] += max_ordernum;
                //更新 在库 齐套出库
                for(int j = 0;j < CountList.length();j++)
                {
                    if(CountList[j].OrderNum == 0)
                    {
                        continue;
                    }
                    int s = 400;
                    foreach(QString product, CountList[j].ProductSet)
                    {
                        if(In_Product[product] < s)
                        {
                            s = In_Product[product];
                        }
                    }
                    if(s > 0)
                    {
                        int delta = 0;
                        if(CountList[j].OrderNum > s)
                        {
                            delta = s;
                            CountList[j].OrderNum -= s;
                            foreach(QString product, CountList[j].ProductSet)
                            {
                                In_Product[product] -= delta;
                            }
                        }
                        else
                        {
                            delta = CountList[j].OrderNum;
                            CountList[j].OrderNum = 0;
                            foreach(QString product, CountList[j].ProductSet)
                            {
                                In_Product[product] -= delta;
                            }
                        }
                        for(int k = 0;k < delta;k++)
                        {
                            QString salesindex = CountList[j].SalesIndex.front();
                            int xlen = SalesMap[salesindex].ProductIndex.count();
                            for(int x = 0;x < xlen;x++)
                            {
                                QString newproduct = SalesMap[salesindex].ProductIndex[x];
                                QString newwork = SalesMap[salesindex].WorkOrder[x];
                                if(SalesIndexs.contains(newproduct))
                                {
                                    SalesIndexs[newproduct].append(newwork);
                                }
                                else
                                {
                                    QList<QString> newworkorder;
                                    newworkorder.append(newwork);
                                    SalesIndexs.insert(newproduct,newworkorder);
                                }
                            }
                            CountList[j].SalesIndex.pop_front();
                        }
                    }
                }
                Index++;
                //记录 order56
                printf("Order5 %s:%d ,",p.toLatin1().data(),max_ordernum);
                //
                int sec1 = orderPourStart + max_waittime + max_cost34 * 60;
                int sec2 = max_cost34 * 60;
                int sec3 = orderPourStart + max_waittime + max_cost34 * 60 + max_pournum * pourtime;
                int mins = sec1 / 60;
                int sec = sec1 % 60;
                int hour = mins / 60;
                int min = mins % 60;
                QString tstr1 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec2 / 60;
                sec = sec2 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr2 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec3 / 60;
                sec = sec3 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr3 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                //
                OutputOrder neworder;
                neworder.Index = Index;
                neworder.OrderType = order56[max_i].OrderType;
                QList<QString> productindex;
                productindex.append(p);
                neworder.ProductIndex = productindex;
                QList<int> productnum;
                productnum.append(max_ordernum);
                neworder.ProductNum = productnum;
                QList<QString> workorder;
                neworder.WorkOrder = workorder;
                neworder.BagStartTime = tstr1;
                neworder.PourStartTime = "";
                neworder.BagRestTime = tstr2;
                neworder.PourRestTime = "";
                neworder.EndTime = tstr3;
                outputorder.append(neworder);
                //
                StockMap[p] = StockMap[p] - max_ordernum + max_pournum;
                QString frontp = order56[max_i].DependProductIndex;
                if(max_pournum > 0)
                {
                    Index++;
                    //记录 order4
                    printf("Order4 %s:%d ,",frontp.toLatin1().data(),max_pournum);
                    OutputOrder neworder;
                    neworder.Index = Index;
                    neworder.OrderType = order34[frontp].OrderType;
                    QList<QString> productindex;
                    productindex.append(frontp);
                    neworder.ProductIndex = productindex;
                    QList<int> productnum;
                    productnum.append(max_pournum);
                    neworder.ProductNum = productnum;
                    QList<QString> workorder;
                    neworder.WorkOrder = workorder;
                    neworder.BagStartTime = "";
                    neworder.PourStartTime = tstr1;
                    neworder.BagRestTime = "";
                    neworder.PourRestTime = tstr2;
                    neworder.EndTime = tstr3;
                    outputorder.append(neworder);
                }
                order56[max_i].ProductNum[p] -= max_ordernum;
                order34[frontp].ProductNum -= max_pournum;
                LastBagOrder = p;
                if(max_pournum > 0)
                {
                    orderPourStart += max_pournum * pourtime + max_cost34 * 60;
                    LastPourOrder = frontp;
                }
                orderBagStart += max_ordernum * bagtime + max_cost56 * 60 + max_waittime;
            }
        }
        if (((sum7 != 0) && !First56) || sum56 == 0)
        {
            //遍历计算各制令单入库数量、可出库数量、灌装数量、换型换料时长
            //int max_count = 0;
            int max_num = 0;
            int max_i = 0;
            QMap<QString,int> max_count;
            int max_cost56 = 0;
            int max_cost7 = 0;
            double max_cost_rate = 0;
            int max_localpourstart = 0;
            for(int i = 0;i < order7.length();i++)
            {
                int tempsum = 0;
                foreach(int tempnum,order7[i].ProductNum.values())
                {
                    tempsum += tempnum;
                }
                if(tempsum == 0)
                {
                    continue;
                }
                int total = 0;
                int cmap[6];
                cmap[1] = 0;
                cmap[2] = 0;
                cmap[3] = 0;
                cmap[4] = 0;
                cmap[5] = 0;
                QMap<QString,int> New_product;//在库产品
                foreach(QString product,In_Product.keys())
                {
                    if(In_Product[product] > 0)
                    {
                        New_product.insert(product,In_Product[product]);
                    }
                }
                QSet<QString> thisset;//当前制令单产品
                QMap<QString,int> thiscount;
                foreach(QString tempp,order7[i].ProductNum.keys())
                {
                    thisset << tempp;
                    thiscount.insert(tempp,0);
                }
                for(int j = 0;j < CountList.length();j++)
                {
                    if(CountList[j].OrderNum == 0)
                    {
                        continue;
                    }
                    QSet<QString> newset = CountList[j].ProductSet;
                    QSet<QString> interset = newset & thisset;
                    if(interset.count() == 0)
                    {
                        continue;
                    }
                    bool allinproduct = true;//是否都在库
                    foreach(QString product,newset)
                    {
                        if(thisset.contains(product))
                        {
                            continue;
                        }
                        if(!New_product.contains(product))
                        {
                            allinproduct = false;
                        }
                    }
                    if(!allinproduct)
                    {
                        continue;
                    }

                    int min_num = CountList[j].OrderNum;
                    foreach(QString product,newset)
                    {
                        if(thisset.contains(product))
                        {
                            continue;
                        }
                        min_num = New_product[product] > min_num ? min_num : New_product[product];
                    }
                    if(min_num > 0)
                    {
                        foreach(QString product,newset)
                        {
                            if(thisset.contains(product))
                            {
                                continue;
                            }
                            New_product[product] -= min_num;
                            thiscount[product] += min_num;
                        }
                        int prolen = newset.count();
                        cmap[prolen] += min_num;
                    }
                }
                total = cmap[5] * 5 + cmap[4] * 4 + cmap[3] * 3 + cmap[2] * 2 + cmap[1];
                if(total > 0)
                {
                    int permitnum = 0;
                    foreach(QString product,In_Product.keys())
                    {
                        permitnum += In_Product[product];
                    }
                    int test_next_order_num = allsetnum - permitnum - total;
                    int costtime56 = 0;
                    int costtime7 = 0;
                    int localpourstart = orderBagStart;
                    QString localLastBagOrder = LastBagOrder;
                    QString localLastPourOrder = LastPourOrder;
                    foreach(QString product,thisset)
                    {
                        if(thiscount[product] > 0)
                        {
                            if(localLastPourOrder == LastPourOrder)
                            {
                                if(localLastBagOrder == "" || !BagCost.contains(localLastBagOrder))
                                {
                                    for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                    {
                                        costtime56 += BagCost[product].BagMReplaceTime[j];
                                        costtime56 += BagCost[product].BagTReplaceTime[j];
                                    }
                                }
                                else
                                {
                                    QSet<QString> lastproductset;
                                    for(int j = 0; j < BagCost[localLastBagOrder].BagProcessStep.length();j++)
                                    {
                                        lastproductset << BagCost[localLastBagOrder].BagProcessStep[j];
                                    }
                                    for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                    {
                                        if(!lastproductset.contains(BagCost[product].BagProcessStep[j]))
                                        {
                                            costtime56 += BagCost[product].BagMReplaceTime[j];
                                            costtime56 += BagCost[product].BagTReplaceTime[j];
                                        }
                                    }
                                }
                                if(localLastPourOrder == "" || !PourCost.contains(localLastPourOrder))
                                {
                                    for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                    {
                                        costtime7 += PourCost[product].PourMReplaceTime[j];
                                        costtime7 += PourCost[product].PourTReplaceTime[j];
                                    }
                                }
                                else
                                {
                                    QSet<QString> lastproductset;
                                    for(int j = 0; j < PourCost[localLastPourOrder].PourProcessStep.length();j++)
                                    {
                                        lastproductset << PourCost[localLastPourOrder].PourProcessStep[j];
                                    }
                                    for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                    {
                                        if(!lastproductset.contains(PourCost[product].PourProcessStep[j]))
                                        {
                                            costtime7 += PourCost[product].PourMReplaceTime[j];
                                            costtime7 += PourCost[product].PourTReplaceTime[j];
                                        }
                                    }
                                }
                                if(orderPourStart < orderBagStart)
                                {
                                    int lasttime = 0;
                                    lasttime = orderBagStart - orderPourStart > costtime7 * 60 ? costtime7 * 60 : orderBagStart - orderPourStart;
                                    localpourstart = orderBagStart - lasttime;
                                }
                            }
                            else
                            {
                                if(localLastBagOrder == "" || !BagCost.contains(localLastBagOrder))
                                {
                                    for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                    {
                                        costtime56 += BagCost[product].BagMReplaceTime[j];
                                        costtime56 += BagCost[product].BagTReplaceTime[j];
                                    }
                                }
                                else
                                {
                                    QSet<QString> lastproductset;
                                    for(int j = 0; j < BagCost[localLastBagOrder].BagProcessStep.length();j++)
                                    {
                                        lastproductset << BagCost[localLastBagOrder].BagProcessStep[j];
                                    }
                                    for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                    {
                                        if(!lastproductset.contains(BagCost[product].BagProcessStep[j]))
                                        {
                                            costtime56 += BagCost[product].BagMReplaceTime[j];
                                            costtime56 += BagCost[product].BagTReplaceTime[j];
                                        }
                                    }
                                }
                                if(localLastPourOrder == "" || !PourCost.contains(localLastPourOrder))
                                {
                                    for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                    {
                                        costtime7 += PourCost[product].PourMReplaceTime[j];
                                        costtime7 += PourCost[product].PourTReplaceTime[j];
                                    }
                                }
                                else
                                {
                                    QSet<QString> lastproductset;
                                    for(int j = 0; j < PourCost[localLastPourOrder].PourProcessStep.length();j++)
                                    {
                                        lastproductset << PourCost[localLastPourOrder].PourProcessStep[j];
                                    }
                                    for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                    {
                                        if(!lastproductset.contains(PourCost[product].PourProcessStep[j]))
                                        {
                                            costtime7 += PourCost[product].PourMReplaceTime[j];
                                            costtime7 += PourCost[product].PourTReplaceTime[j];
                                        }
                                    }
                                }
                            }
                            localLastBagOrder = product;
                            localLastPourOrder = product;
                        }
                    }
                    double cost_rate = test_next_order_num * bagtime / (costtime56 * 60 + test_next_order_num * bagtime);
                    if(cost_rate > max_cost_rate)
                    {
                        max_num = total;
                        max_i = i;
                        max_count = thiscount;
                        max_cost56 = costtime56;
                        max_cost7 = costtime7;
                        max_cost_rate = cost_rate;
                        max_localpourstart = localpourstart;
                    }
                }
            }
            if(max_num == 0)
            {
                //可出库数量为0
                //计算剩余库存中可直接入库数量,进仓
                int permitnum = 0;
                foreach(QString product,In_Product.keys())
                {
                    permitnum += In_Product[product];
                }
                if(sum7 < allsetnum - permitnum)
                {
                    for(int i = 0;i < order7.length();i++)
                    {
                        int tempsum = 0;
                        foreach(int tempnum,order7[i].ProductNum.values())
                        {
                            tempsum += tempnum;
                        }
                        if(tempsum == 0)
                        {
                            continue;
                        }
                        int localpourstart = orderBagStart;
                        QString localLastBagOrder = LastBagOrder;
                        QString localLastPourOrder = LastPourOrder;
                        int costtime56 = 0;
                        int costtime7 = 0;
                        foreach(QString product,order7[i].ProductNum.keys())
                        {
                            if(order7[i].ProductNum[product] > 0)
                            {
                                int next_order_num = order7[i].ProductNum[product];
                                if(localLastPourOrder == LastPourOrder)
                                {
                                    if(localLastBagOrder == "" || !BagCost.contains(localLastBagOrder))
                                    {
                                        for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                        {
                                            costtime56 += BagCost[product].BagMReplaceTime[j];
                                            costtime56 += BagCost[product].BagTReplaceTime[j];
                                        }
                                    }
                                    else
                                    {
                                        QSet<QString> lastproductset;
                                        for(int j = 0; j < BagCost[localLastBagOrder].BagProcessStep.length();j++)
                                        {
                                            lastproductset << BagCost[localLastBagOrder].BagProcessStep[j];
                                        }
                                        for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                        {
                                            if(!lastproductset.contains(BagCost[product].BagProcessStep[j]))
                                            {
                                                costtime56 += BagCost[product].BagMReplaceTime[j];
                                                costtime56 += BagCost[product].BagTReplaceTime[j];
                                            }
                                        }
                                    }
                                    if(localLastPourOrder == "" || !PourCost.contains(localLastPourOrder))
                                    {
                                        for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                        {
                                            costtime7 += PourCost[product].PourMReplaceTime[j];
                                            costtime7 += PourCost[product].PourTReplaceTime[j];
                                        }
                                    }
                                    else
                                    {
                                        QSet<QString> lastproductset;
                                        for(int j = 0; j < PourCost[localLastPourOrder].PourProcessStep.length();j++)
                                        {
                                            lastproductset << PourCost[localLastPourOrder].PourProcessStep[j];
                                        }
                                        for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                        {
                                            if(!lastproductset.contains(PourCost[product].PourProcessStep[j]))
                                            {
                                                costtime7 += PourCost[product].PourMReplaceTime[j];
                                                costtime7 += PourCost[product].PourTReplaceTime[j];
                                            }
                                        }
                                    }
                                    if(orderPourStart < orderBagStart)
                                    {
                                        int lasttime = 0;
                                        lasttime = orderBagStart - orderPourStart > costtime7 * 60 ? costtime7 * 60 : orderBagStart - orderPourStart;
                                        localpourstart = orderBagStart - lasttime;
                                    }
                                }
                                else
                                {
                                    if(localLastBagOrder == "" || !BagCost.contains(localLastBagOrder))
                                    {
                                        for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                        {
                                            costtime56 += BagCost[product].BagMReplaceTime[j];
                                            costtime56 += BagCost[product].BagTReplaceTime[j];
                                        }
                                    }
                                    else
                                    {
                                        QSet<QString> lastproductset;
                                        for(int j = 0; j < BagCost[localLastBagOrder].BagProcessStep.length();j++)
                                        {
                                            lastproductset << BagCost[localLastBagOrder].BagProcessStep[j];
                                        }
                                        for(int j = 0; j < BagCost[product].BagProcessStep.length();j++)
                                        {
                                            if(!lastproductset.contains(BagCost[product].BagProcessStep[j]))
                                            {
                                                costtime56 += BagCost[product].BagMReplaceTime[j];
                                                costtime56 += BagCost[product].BagTReplaceTime[j];
                                            }
                                        }
                                    }
                                    if(localLastPourOrder == "" || !PourCost.contains(localLastPourOrder))
                                    {
                                        for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                        {
                                            costtime7 += PourCost[product].PourMReplaceTime[j];
                                            costtime7 += PourCost[product].PourTReplaceTime[j];
                                        }
                                    }
                                    else
                                    {
                                        QSet<QString> lastproductset;
                                        for(int j = 0; j < PourCost[localLastPourOrder].PourProcessStep.length();j++)
                                        {
                                            lastproductset << PourCost[localLastPourOrder].PourProcessStep[j];
                                        }
                                        for(int j = 0; j < PourCost[product].PourProcessStep.length();j++)
                                        {
                                            if(!lastproductset.contains(PourCost[product].PourProcessStep[j]))
                                            {
                                                costtime7 += PourCost[product].PourMReplaceTime[j];
                                                costtime7 += PourCost[product].PourTReplaceTime[j];
                                            }
                                        }
                                    }
                                }
                                localLastBagOrder = product;
                                localLastPourOrder = product;
                                In_Product[product] += next_order_num;
                            }
                        }
                        //更新 在库 齐套出库
                        for(int j = 0;j < CountList.length();j++)
                        {
                            if(CountList[j].OrderNum == 0)
                            {
                                continue;
                            }
                            int s = 400;
                            foreach(QString product, CountList[j].ProductSet)
                            {
                                if(In_Product[product] < s)
                                {
                                    s = In_Product[product];
                                }
                            }
                            if(s > 0)
                            {
                                int delta = 0;
                                if(CountList[j].OrderNum > s)
                                {
                                    delta = s;
                                    CountList[j].OrderNum -= s;
                                    foreach(QString product, CountList[j].ProductSet)
                                    {
                                        In_Product[product] -= delta;
                                    }
                                }
                                else
                                {
                                    delta = CountList[j].OrderNum;
                                    CountList[j].OrderNum = 0;
                                    foreach(QString product, CountList[j].ProductSet)
                                    {
                                        In_Product[product] -= delta;
                                    }
                                }
                                for(int k = 0;k < delta;k++)
                                {
                                    QString salesindex = CountList[j].SalesIndex.front();
                                    int xlen = SalesMap[salesindex].ProductIndex.count();
                                    for(int x = 0;x < xlen;x++)
                                    {
                                        QString newproduct = SalesMap[salesindex].ProductIndex[x];
                                        QString newwork = SalesMap[salesindex].WorkOrder[x];
                                        if(SalesIndexs.contains(newproduct))
                                        {
                                            SalesIndexs[newproduct].append(newwork);
                                        }
                                        else
                                        {
                                            QList<QString> newworkorder;
                                            newworkorder.append(newwork);
                                            SalesIndexs.insert(newproduct,newworkorder);
                                        }
                                    }
                                    CountList[j].SalesIndex.pop_front();
                                }
                            }
                        }
                        Index++;
                        int tempsum2 = 0;
                        foreach(int tempnum,order7[i].ProductNum.values())
                        {
                            tempsum2 += tempnum;
                        }
                        int tempbagtimealpha = localpourstart + costtime7 * 60 > orderBagStart + costtime56 * 60 ? localpourstart + costtime7 * 60 : orderBagStart + costtime56 * 60;
                        tempbagtimealpha = tempbagtimealpha + tempsum2 * bagtime;
                        //记录 order7
                        printf("Order7 %s:%d ,",order7[i].ProductNum.firstKey().toLatin1().data(),1);
                        //
                        int sec1 = orderBagStart;
                        int sec2 = localpourstart;
                        int sec3 = costtime56 * 60;
                        int sec4 = costtime7 * 60;
                        int sec5 = tempbagtimealpha;
                        int mins = sec1 / 60;
                        int sec = sec1 % 60;
                        int hour = mins / 60;
                        int min = mins % 60;
                        QString tstr1 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                        mins = sec2 / 60;
                        sec = sec2 % 60;
                        hour = mins / 60;
                        min = mins % 60;
                        QString tstr2 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                        mins = sec3 / 60;
                        sec = sec3 % 60;
                        hour = mins / 60;
                        min = mins % 60;
                        QString tstr3 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                        mins = sec4 / 60;
                        sec = sec4 % 60;
                        hour = mins / 60;
                        min = mins % 60;
                        QString tstr4 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                        mins = sec5 / 60;
                        sec = sec5 % 60;
                        hour = mins / 60;
                        min = mins % 60;
                        QString tstr5 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                        //
                        OutputOrder neworder;
                        neworder.Index = Index;
                        neworder.OrderType = order7[i].OrderType;
                        QList<QString> productindex;
                        foreach(QString product,order7[i].ProductNum.keys())
                        {
                            productindex.append(product);
                        }
                        neworder.ProductIndex = productindex;
                        QList<int> productnum;
                        foreach(int tempnum,order7[i].ProductNum.values())
                        {
                            productnum.append(tempnum);
                        }
                        neworder.ProductNum = productnum;
                        QList<QString> workorder;
                        neworder.WorkOrder = workorder;
                        neworder.BagStartTime = tstr1;
                        neworder.PourStartTime = tstr2;
                        neworder.BagRestTime = tstr3;
                        neworder.PourRestTime = tstr4;
                        neworder.EndTime = tstr5;
                        outputorder.append(neworder);
                        //
                        orderBagStart = tempbagtimealpha;
                        orderPourStart = orderBagStart;
                        foreach(QString product,order7[i].ProductNum.keys())
                        {
                            order7[i].ProductNum[product] = 0;
                        }
                    }
                }
                else
                {
                    First56 = true;
                }
            }
            else
            {//否则,进仓
                int test_sum = 0;
                int actual_sum = 0;
                foreach(QString product, max_count.keys())
                {
                    actual_sum += max_count[product];
                    test_sum += order7[max_i].ProductNum[product];
                }
                int permitnum = 0;
                foreach(QString product,In_Product.keys())
                {
                    permitnum += In_Product[product];
                }
                int last_order_num = allsetnum - permitnum + max_num - actual_sum;
                int extra_len = max_count.count();
                int max_order_num = 0;
                QMap<QString,int> next_count;
                foreach(QString product, max_count.keys())
                {
                    int extra_order_num = 0;
                    if (test_sum >= allsetnum - permitnum + max_num)
                    {
                        if(order7[max_i].ProductNum[product] - max_count[product] < int(last_order_num / extra_len))
                        {
                            extra_order_num = order7[max_i].ProductNum[product] - max_count[product];
                            if (extra_order_num < 0)
                            {
                                extra_order_num = 0;
                            }
                        }
                        else
                        {
                            extra_order_num = int(last_order_num / extra_len);
                            if (extra_order_num < 0)
                            {
                                extra_order_num = 0;
                            }
                        }
                        max_order_num = max_count[product] + extra_order_num;
                        last_order_num -= extra_order_num;
                        extra_len -= 1;
                    }
                    else
                    {
                        max_order_num = order7[max_i].ProductNum[product];
                    }
                    In_Product[product] += max_order_num;
                    next_count.insert(product, max_order_num);
                }
                //更新 在库 齐套出库
                for(int j = 0;j < CountList.length();j++)
                {
                    if(CountList[j].OrderNum == 0)
                    {
                        continue;
                    }
                    int s = 400;
                    foreach(QString product, CountList[j].ProductSet)
                    {
                        if(In_Product[product] < s)
                        {
                            s = In_Product[product];
                        }
                    }
                    if(s > 0)
                    {
                        int delta = 0;
                        if(CountList[j].OrderNum > s)
                        {
                            delta = s;
                            CountList[j].OrderNum -= s;
                            foreach(QString product, CountList[j].ProductSet)
                            {
                                In_Product[product] -= delta;
                            }
                        }
                        else
                        {
                            delta = CountList[j].OrderNum;
                            CountList[j].OrderNum = 0;
                            foreach(QString product, CountList[j].ProductSet)
                            {
                                In_Product[product] -= delta;
                            }
                        }
                        for(int k = 0;k < delta;k++)
                        {
                            QString salesindex = CountList[j].SalesIndex.front();
                            int xlen = SalesMap[salesindex].ProductIndex.count();
                            for(int x = 0;x < xlen;x++)
                            {
                                QString newproduct = SalesMap[salesindex].ProductIndex[x];
                                QString newwork = SalesMap[salesindex].WorkOrder[x];
                                if(SalesIndexs.contains(newproduct))
                                {
                                    SalesIndexs[newproduct].append(newwork);
                                }
                                else
                                {
                                    QList<QString> newworkorder;
                                    newworkorder.append(newwork);
                                    SalesIndexs.insert(newproduct,newworkorder);
                                }
                            }
                            CountList[j].SalesIndex.pop_front();
                        }
                    }
                }
                Index++;
                //记录 order7
                printf("Order7 %s:%d ,",order7[max_i].ProductNum.firstKey().toLatin1().data(),1);
                int next_num = 0;
                foreach(QString product, next_count.keys())
                {
                    next_num += next_count[product];
                }
                int tempbagtimealpha = max_localpourstart + max_cost7 * 60;
                if(tempbagtimealpha < orderBagStart + max_cost56 * 60)
                {
                    tempbagtimealpha = orderBagStart + max_cost56 * 60;
                }
                tempbagtimealpha += next_num * bagtime;
                //记录 order7
                //
                int sec1 = orderBagStart;
                int sec2 = max_localpourstart;
                int sec3 = max_cost56 * 60;
                int sec4 = max_cost7 * 60;
                int sec5 = tempbagtimealpha;
                int mins = sec1 / 60;
                int sec = sec1 % 60;
                int hour = mins / 60;
                int min = mins % 60;
                QString tstr1 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec2 / 60;
                sec = sec2 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr2 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec3 / 60;
                sec = sec3 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr3 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec4 / 60;
                sec = sec4 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr4 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                mins = sec5 / 60;
                sec = sec5 % 60;
                hour = mins / 60;
                min = mins % 60;
                QString tstr5 = QString("%1:%2:%3").arg(hour).arg(min).arg(sec);
                //
                OutputOrder neworder;
                neworder.Index = Index;
                neworder.OrderType = order7[max_i].OrderType;
                QList<QString> productindex;
                foreach(QString product,order7[max_i].ProductNum.keys())
                {
                    productindex.append(product);
                }
                neworder.ProductIndex = productindex;
                QList<int> productnum;
                foreach(int tempnum,order7[max_i].ProductNum.values())
                {
                    productnum.append(tempnum);
                }
                neworder.ProductNum = productnum;
                QList<QString> workorder;
                neworder.WorkOrder = workorder;
                neworder.BagStartTime = tstr1;
                neworder.PourStartTime = tstr2;
                neworder.BagRestTime = tstr3;
                neworder.PourRestTime = tstr4;
                neworder.EndTime = tstr5;
                outputorder.append(neworder);
                //
                orderBagStart = tempbagtimealpha;
                orderPourStart = orderBagStart;
                foreach(QString product, next_count.keys())
                {
                    order7[max_i].ProductNum[product] -= next_count[product];
                }
                QString p = order56[max_i].ProductNum.firstKey();
                LastBagOrder = p;
                LastPourOrder = p;
            }
        }
    }
    for(int i = 0;i < outputorder.count();i++)
    {
        int plen = outputorder[i].ProductIndex.count();
        for(int j = 0;j < plen;j++)
        {
            QString product = outputorder[i].ProductIndex[j];
            int pnum = outputorder[i].ProductNum[j];
            for(int n = 0;n < pnum;n++)
            {
                QString newwork = SalesIndexs[product].front();
                outputorder[i].WorkOrder.append(newwork);
                SalesIndexs[product].pop_front();
            }
        }
    }

    QJsonArray newArray;
    foreach(OutputOrder newoutorder, outputorder)
    {
        QJsonObject newobject;
        newobject.insert("Index",newoutorder.Index);
        newobject.insert("OrderType",newoutorder.OrderType);
        QJsonArray newArray1;
        foreach(QString productindex, newoutorder.ProductIndex)
        {
            newArray1.append(productindex);
        }
        newobject.insert("ProductIndex",newArray1);
        QJsonArray newArray2;
        foreach(int productnum, newoutorder.ProductNum)
        {
            newArray2.append(productnum);
        }
        newobject.insert("ProductNum",newArray2);
        QJsonArray newArray3;
        foreach(QString workorder, newoutorder.WorkOrder)
        {
            newArray3.append(workorder);
        }
        newobject.insert("WorkOrder",newArray3);
        newobject.insert("BagStartTime",newoutorder.BagStartTime);
        newobject.insert("PourStartTime",newoutorder.PourStartTime);
        newobject.insert("BagRestTime",newoutorder.BagRestTime);
        newobject.insert("PourRestTime",newoutorder.PourRestTime);
        newobject.insert("EndTime",newoutorder.EndTime);
        newArray.append(newobject);
    }
    QJsonDocument document;
    document.setArray(newArray);
    QByteArray qbyte = document.toJson(QJsonDocument::Compact);

    char *outputchar;
    outputchar = qbyte.data();
    memcpy(buffer4,outputchar,strlen(outputchar));

    return 1;
}
